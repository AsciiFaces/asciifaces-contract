{
  "address": "0xF82069c336f6Ca7F55aEa3B77037E5C0f6b120ff",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seed",
          "type": "uint256"
        }
      ],
      "name": "createFace",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getFace",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
  "receipt": {
    "to": null,
    "from": "0xEFbb7A3c17CBF6F27476DB15fc0d556302f55102",
    "contractAddress": "0xF82069c336f6Ca7F55aEa3B77037E5C0f6b120ff",
    "transactionIndex": 0,
    "gasUsed": "5809612",
    "logsBloom": "0x
    "blockHash": "0x9d8b16d8e7be44714af8e09af4c75771b3b0aa7301302f18b24e545cba1a4858",
    "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 16502941,
        "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
        "address": "0xF82069c336f6Ca7F55aEa3B77037E5C0f6b120ff",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000efbb7a3c17cbf6f27476db15fc0d556302f55102"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9d8b16d8e7be44714af8e09af4c75771b3b0aa7301302f18b24e545cba1a4858"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16502941,
        "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
        "address": "0xF82069c336f6Ca7F55aEa3B77037E5C0f6b120ff",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000efbb7a3c17cbf6f27476db15fc0d556302f55102",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x9d8b16d8e7be44714af8e09af4c75771b3b0aa7301302f18b24e545cba1a4858"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16502941,
        "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
        "address": "0xF82069c336f6Ca7F55aEa3B77037E5C0f6b120ff",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000efbb7a3c17cbf6f27476db15fc0d556302f55102",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x9d8b16d8e7be44714af8e09af4c75771b3b0aa7301302f18b24e545cba1a4858"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16502941,
        "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
        "address": "0xF82069c336f6Ca7F55aEa3B77037E5C0f6b120ff",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000efbb7a3c17cbf6f27476db15fc0d556302f55102",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x9d8b16d8e7be44714af8e09af4c75771b3b0aa7301302f18b24e545cba1a4858"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16502941,
        "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
        "address": "0xF82069c336f6Ca7F55aEa3B77037E5C0f6b120ff",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000efbb7a3c17cbf6f27476db15fc0d556302f55102",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x9d8b16d8e7be44714af8e09af4c75771b3b0aa7301302f18b24e545cba1a4858"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16502941,
        "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
        "address": "0xF82069c336f6Ca7F55aEa3B77037E5C0f6b120ff",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000efbb7a3c17cbf6f27476db15fc0d556302f55102",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x9d8b16d8e7be44714af8e09af4c75771b3b0aa7301302f18b24e545cba1a4858"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16502941,
        "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
        "address": "0xF82069c336f6Ca7F55aEa3B77037E5C0f6b120ff",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000efbb7a3c17cbf6f27476db15fc0d556302f55102",
          "0x0000000000000000000000000000000000000000000000000000000000000006"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x9d8b16d8e7be44714af8e09af4c75771b3b0aa7301302f18b24e545cba1a4858"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16502941,
        "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
        "address": "0xF82069c336f6Ca7F55aEa3B77037E5C0f6b120ff",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000efbb7a3c17cbf6f27476db15fc0d556302f55102",
          "0x0000000000000000000000000000000000000000000000000000000000000007"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x9d8b16d8e7be44714af8e09af4c75771b3b0aa7301302f18b24e545cba1a4858"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16502941,
        "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
        "address": "0xF82069c336f6Ca7F55aEa3B77037E5C0f6b120ff",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000efbb7a3c17cbf6f27476db15fc0d556302f55102",
          "0x0000000000000000000000000000000000000000000000000000000000000008"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x9d8b16d8e7be44714af8e09af4c75771b3b0aa7301302f18b24e545cba1a4858"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16502941,
        "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
        "address": "0xF82069c336f6Ca7F55aEa3B77037E5C0f6b120ff",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000efbb7a3c17cbf6f27476db15fc0d556302f55102",
          "0x0000000000000000000000000000000000000000000000000000000000000009"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x9d8b16d8e7be44714af8e09af4c75771b3b0aa7301302f18b24e545cba1a4858"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16502941,
        "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
        "address": "0xF82069c336f6Ca7F55aEa3B77037E5C0f6b120ff",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000efbb7a3c17cbf6f27476db15fc0d556302f55102",
          "0x000000000000000000000000000000000000000000000000000000000000000a"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x9d8b16d8e7be44714af8e09af4c75771b3b0aa7301302f18b24e545cba1a4858"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 16502941,
        "transactionHash": "0x4b39a6789ce4217c2c56430360f4e8bf953148593a02abf2bb36700342aa4638",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000efbb7a3c17cbf6f27476db15fc0d556302f55102",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000014a3cfb38af80000000000000000000000000000000000000000000000000000ed5aa087cc36000000000000000000000000000000000000000000000000d189e8e538e58ea95300000000000000000000000000000000000000000000000000d8b6d0d4413e000000000000000000000000000000000000000000000000d189fd89089919a153",
        "logIndex": 11,
        "blockHash": "0x9d8b16d8e7be44714af8e09af4c75771b3b0aa7301302f18b24e545cba1a4858"
      }
    ],
    "blockNumber": 16502941,
    "cumulativeGasUsed": "5809612",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1e2a56f0b31d86693aa7926c69d2cc14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"createFace\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFace\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AsciiFaces.sol\":\"AsciiFaces\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x2d9f9af8b84d252e0e7ee716e4cb3ad1b58f3ec6619e4f54f40d4b5e28f75eb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x3dce5847e70c056ef0f7cf91cb9a0067cf90784794017a45c1211cde7ed1c08c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/AsciiFaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract AsciiFaces is ERC721, ERC721Enumerable, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIdCounter;\\n\\n    mapping(uint256 => uint256) internal idToSeed;\\n    mapping(uint256 => uint256) internal seedToId;\\n\\n    uint256 private constant EYE_COUNT = 51;\\n    uint256 private constant MOUTH_COUNT = 44;\\n    uint256 private constant EDGE_COUNT = 34;\\n\\n    uint256 public constant MAX_SUPPLY = 5000;\\n\\n    bool public hasSaleStarted = false;\\n\\n    string public baseURI;\\n\\n    constructor() ERC721(\\\"AsciiFaces\\\", \\\"ASF\\\") {\\n        setBaseURI(\\\"https://api.asciifaces.com/face/\\\");\\n\\n        // mint 10 genesis faces\\n        _registerToken(60, owner()); // \\uff9b\\n        _registerToken(27, owner()); // \\u3023(\\u0ca5.\\u0ca5)\\u3023\\n        _registerToken(44, owner()); // \\u30fd\\u0f3c\\u25d4\\u0414\\u25d4\\u0f3d\\uff89\\n        _registerToken(70, owner()); // [\\u03a6\\u25bd\\u03a6]\\n        _registerToken(116, owner()); // (\\uff89\\u00d7\\u25bf\\u00d7)\\uff89\\n        _registerToken(158, owner()); // \\u0e51\\u11ba\\u0e51\\n        _registerToken(221, owner()); // \\u3010\\uff20\\u76ca\\uff20\\u3011\\n        _registerToken(222, owner()); // \\u2282(-\\u058a-)\\u2283\\n        _registerToken(233, owner()); // \\u30fd(\\u25d5\\u30ee\\u25d5)\\uff89\\n        _registerToken(206, owner()); // \\u2591(\\u0c20\\u76ca\\u0c20)\\u2591\\n    }\\n\\n    function getFace(uint256 id) external view returns (string memory) {\\n        require(_exists(id), \\\"ERC721: Token is not exist\\\");\\n        uint256 seed = idToSeed[id];\\n\\n        string memory face = _createFace(seed);\\n\\n        return face;\\n    }\\n\\n    function createFace(uint256 _seed) public returns (string memory) {\\n        require(hasSaleStarted == true, \\\"Sale hasn't started\\\");\\n        require(_tokenIdCounter.current() < MAX_SUPPLY, \\\"Sale has ended, you can still buy on secondary market\\\");\\n\\n        uint256 seed =\\n            uint256(keccak256(abi.encodePacked(_seed, block.timestamp, msg.sender, _tokenIdCounter.current())));\\n\\n        require(seedToId[seed] == 0, \\\"ERC721: seed already used\\\");\\n\\n        return _registerToken(seed, msg.sender);\\n    }\\n\\n    function _registerToken(uint256 _seed, address to) internal returns (string memory) {\\n        _tokenIdCounter.increment();\\n\\n        idToSeed[_tokenIdCounter.current()] = _seed;\\n        seedToId[_seed] = _tokenIdCounter.current();\\n\\n        string memory face = _createFace(idToSeed[_tokenIdCounter.current()]);\\n\\n        _mint(to, _tokenIdCounter.current());\\n\\n        return face;\\n    }\\n\\n    function _createFace(uint256 _seed) internal pure returns (string memory) {\\n        uint256 rand = uint256(keccak256(abi.encodePacked(_seed)));\\n\\n        string[2] memory edge = _getEdge(rand);\\n        string[2] memory eye = _getEye(rand);\\n        string memory mouth = _getMouth(rand);\\n\\n        return string(abi.encodePacked(edge[0], eye[0], mouth, eye[1], edge[1]));\\n    }\\n\\n    function _getEdge(uint256 _rand) internal pure returns (string[2] memory) {\\n        string[2][EDGE_COUNT] memory edges =\\n            [\\n                [unicode\\\"\\\", unicode\\\"\\\"],\\n                [unicode\\\"(\\\", unicode\\\")\\\"],\\n                [unicode\\\"\\u30fd(\\\", unicode\\\")\\uff89\\\"],\\n                [unicode\\\"<(\\\", unicode\\\")>\\\"],\\n                [unicode\\\"\\u0669(\\\", unicode\\\")\\u06f6\\\"],\\n                [unicode\\\"\\u2570(\\\", unicode\\\")\\u256f\\\"],\\n                [unicode\\\"\\uff3c(\\\", unicode\\\")\\uff0f\\\"],\\n                [unicode\\\"(\\uff89\\\", unicode\\\")\\uff89\\\"],\\n                [unicode\\\"(\\\", unicode\\\")\\u30ce\\\"],\\n                [unicode\\\"(\\u300d\\\", unicode\\\")\\u300d\\\"],\\n                [unicode\\\"\\u30fe(\\\", unicode\\\")\\uff89\\uff9e\\\"],\\n                [unicode\\\"\\u51f8(\\\", unicode\\\")\\u51f8\\\"],\\n                [unicode\\\"(\\\", unicode\\\")\\u2208\\\"],\\n                [unicode\\\"\\u0b67(\\\", unicode\\\")\\u0b68\\\"],\\n                [unicode\\\"(\\u3063\\\", unicode\\\")\\u3063\\\"],\\n                [unicode\\\"o(\\\", unicode\\\")o\\\"],\\n                [unicode\\\"[\\\", unicode\\\"]\\\"],\\n                [unicode\\\"{\\\", unicode\\\"}\\\"],\\n                [unicode\\\"\\u301c(\\\", unicode\\\")\\u301c\\\"],\\n                [unicode\\\"\\u3023(\\\", unicode\\\")\\u3023\\\"],\\n                [unicode\\\"\\u2591(\\\", unicode\\\")\\u2591\\\"],\\n                [unicode\\\"\\u30fd(\\\", unicode\\\")\\u250c\\\"],\\n                [unicode\\\"\\u2510(\\\", unicode\\\")\\u250c\\\"],\\n                [unicode\\\"~|\\\", unicode\\\"|~\\\"],\\n                [unicode\\\"\\u2282(\\\", unicode\\\")\\u2283\\\"],\\n                [unicode\\\"\\uff0f(\\\", unicode\\\")\\uff3c\\\"],\\n                [unicode\\\"\\u30d8(\\\", unicode\\\"\\u30d8)\\\"],\\n                [unicode\\\"\\u301c(\\\", unicode\\\"\\u301c)\\\"],\\n                [unicode\\\"\\u3010\\\", unicode\\\"\\u3011\\\"],\\n                [unicode\\\"(\\u0a6d\\\", unicode\\\")\\u0a6d\\\"],\\n                [unicode\\\"\\u255a(\\\", unicode\\\")\\u255d\\\"],\\n                [unicode\\\"\\u30fd\\u0f3c\\\", unicode\\\"\\u0f3d\\uff89\\\"],\\n                [unicode\\\"<|\\\", unicode\\\"|>\\\"],\\n                [unicode\\\"||\\\", unicode\\\"||\\\"]\\n            ];\\n\\n        uint256 edgeId = _rand % EDGE_COUNT;\\n\\n        return edges[edgeId];\\n    }\\n\\n    function _getEye(uint256 _rand) internal pure returns (string[2] memory) {\\n        string[2][EYE_COUNT] memory eyes =\\n            [\\n                [unicode\\\"\\\", unicode\\\"\\\"],\\n                [unicode\\\"\\u00b4\\\", unicode\\\"`\\\"],\\n                [unicode\\\"\\u25d5\\\", unicode\\\"\\u25d5\\\"],\\n                [unicode\\\"\\u2267\\\", unicode\\\"\\u2266\\\"],\\n                [unicode\\\"\\u2312\\\", unicode\\\"\\u2312\\\"],\\n                [unicode\\\"\\uffe3\\\", unicode\\\"\\uffe3\\\"],\\n                [unicode\\\"\\u2022\\\", unicode\\\"\\u2022\\\"],\\n                [unicode\\\"\\u00b0\\\", unicode\\\"\\u00b0\\\"],\\n                [unicode\\\"\\uff3e\\\", unicode\\\"\\uff3e\\\"],\\n                [unicode\\\"\\u2727\\\", unicode\\\"\\u2727\\\"],\\n                [unicode\\\"\\u272f\\\", unicode\\\"\\u272f\\\"],\\n                [unicode\\\"\\u2022\\u0301\\\", unicode\\\"\\u2022\\u0300\\\"],\\n                [unicode\\\"*\\\", unicode\\\"*\\\"],\\n                [unicode\\\"T\\\", unicode\\\"T\\\"],\\n                [unicode\\\"\\u02c3\\\", unicode\\\"\\u02c2\\\"],\\n                [unicode\\\"\\ua4a6\\u0eb5\\\", unicode\\\"\\ua4a6\\u0eb5\\\"],\\n                [unicode\\\"\\u275b\\\", unicode\\\"\\u275b\\\"],\\n                [unicode\\\"\\u00ac\\\", unicode\\\"\\u00ac\\\"],\\n                [unicode\\\"\\uff65\\\", unicode\\\"\\uff65\\\"],\\n                [unicode\\\"\\u1d54\\\", unicode\\\"\\u1d54\\\"],\\n                [unicode\\\"\\uffe2\\\", unicode\\\"\\uffe2\\\"],\\n                [unicode\\\"\\u2040\\\", unicode\\\"\\u2040\\\"],\\n                [unicode\\\"\\u02d9\\\", unicode\\\"\\u02d9\\\"],\\n                [unicode\\\"\\u03bc\\\", unicode\\\"\\u03bc\\\"],\\n                [unicode\\\"-\\\", unicode\\\"-\\\"],\\n                [unicode\\\"\\u00b4\\u2022\\\", unicode\\\"\\u2022`\\\"],\\n                [unicode\\\"\\u2661\\\", unicode\\\"\\u2661\\\"],\\n                [unicode\\\"\\u03c3\\\", unicode\\\"\\u03c3\\\"],\\n                [unicode\\\"\\u2764\\\", unicode\\\"\\u2764\\\"],\\n                [unicode\\\"\\ub208\\\", unicode\\\"\\ub208\\\"],\\n                [unicode\\\"\\u25e3\\\", unicode\\\"\\u25e2\\\"],\\n                [unicode\\\"`\\\", unicode\\\"\\u00b4\\\"],\\n                [unicode\\\"\\u25bc\\\", unicode\\\"\\u25bc\\\"],\\n                [unicode\\\"\\u03a6\\\", unicode\\\"\\u03a6\\\"],\\n                [unicode\\\"\\u0e51\\\", unicode\\\"\\u0e51\\\"],\\n                [unicode\\\"\\u0298\\\", unicode\\\"\\u0298\\\"],\\n                [unicode\\\"\\u0ca5\\\", unicode\\\"\\u0ca5\\\"],\\n                [unicode\\\"\\u0c20\\\", unicode\\\"\\u0c20\\\"],\\n                [unicode\\\"\\u0ca5\\\", unicode\\\"\\u0ca5\\\"],\\n                [unicode\\\"\\u256f\\\", unicode\\\"\\u2570\\\"],\\n                [unicode\\\"\\u2565\\\", unicode\\\"\\u2565\\\"],\\n                [unicode\\\"\\u00d7\\\", unicode\\\"\\u00d7\\\"],\\n                [unicode\\\"\\uff0b\\\", unicode\\\"\\uff0b\\\"],\\n                [unicode\\\">\\\", unicode\\\"<\\\"],\\n                [unicode\\\"\\u02c7\\\", unicode\\\"\\u02c7\\\"],\\n                [unicode\\\"\\uff20\\\", unicode\\\"\\uff20\\\"],\\n                [unicode\\\"\\u14c0\\\", unicode\\\"\\u14c0\\\"],\\n                [unicode\\\"\\u2022\\u0300\\\", unicode\\\"\\u2022\\u0301\\\"],\\n                [unicode\\\"\\u25d4\\\", unicode\\\"\\u25d4\\\"],\\n                [unicode\\\"\\u0ca0\\\", unicode\\\"\\u0ca0\\\"],\\n                [unicode\\\"\\u25cf\\\", unicode\\\"\\u25cf\\\"]\\n            ];\\n\\n        uint256 eyeId = _rand % EYE_COUNT;\\n\\n        return eyes[eyeId];\\n    }\\n\\n    function _getMouth(uint256 _rand) internal pure returns (string memory) {\\n        string[MOUTH_COUNT] memory mouths =\\n            [\\n                unicode\\\"\\\",\\n                unicode\\\".\\\",\\n                unicode\\\"_\\\",\\n                unicode\\\"-\\\",\\n                unicode\\\"\\u25bd\\\",\\n                unicode\\\"\\u31c1\\\",\\n                unicode\\\"\\u1d25\\\",\\n                unicode\\\"\\u03c9\\\",\\n                unicode\\\"\\u203f\\\",\\n                unicode\\\"\\ufe36\\\",\\n                unicode\\\"\\u25e1\\\",\\n                unicode\\\"\\u4eba\\\",\\n                unicode\\\"\\u2200\\\",\\n                unicode\\\"\\u203f\\u203f\\\",\\n                unicode\\\"\\u30ee\\\",\\n                unicode\\\"\\u25bf\\\",\\n                unicode\\\"\\u15e2\\\",\\n                unicode\\\"\\ua4b3\\\",\\n                unicode\\\"\\u058a\\\",\\n                unicode\\\"\\u03b5\\\",\\n                unicode\\\"\\u0437\\\",\\n                unicode\\\"\\u0414\\\",\\n                unicode\\\"0\\\",\\n                unicode\\\"\\ufe4c\\\",\\n                unicode\\\"\\u30d8\\\",\\n                unicode\\\"\\u2312\\\",\\n                unicode\\\"\\u76ca\\\",\\n                unicode\\\"\\u76bf\\\",\\n                unicode\\\"\\u25b3\\\",\\n                unicode\\\"\\ufe4f\\\",\\n                unicode\\\"\\uff9b\\\",\\n                unicode\\\"^\\\",\\n                unicode\\\"w\\\",\\n                unicode\\\"\\u25a1\\\",\\n                unicode\\\"\\ufe3f\\\",\\n                unicode\\\"\\uff64\\\",\\n                unicode\\\"\\uff5e\\\",\\n                unicode\\\"\\u3002\\\",\\n                unicode\\\"\\u0296\\\",\\n                unicode\\\"\\u1d25\\\",\\n                unicode\\\"(\\uff74)\\\",\\n                unicode\\\"\\u00d7\\\",\\n                unicode\\\"\\u11ba\\\",\\n                unicode\\\"\\u0398\\\"\\n            ];\\n\\n        uint256 mouthId = _rand % MOUTH_COUNT;\\n\\n        return mouths[mouthId];\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function startSale() external onlyOwner {\\n        hasSaleStarted = true;\\n    }\\n\\n    function pauseSale() external onlyOwner {\\n        hasSaleStarted = false;\\n    }\\n\\n    function setBaseURI(string memory baseURI_) public onlyOwner {\\n        baseURI = baseURI_;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x5280561e061dddb19ff0a067ce83933005162b47272829bfa7a8b6b894864c8f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600e805460ff191690553480156200001b57600080fd5b50604080518082018252600a8152694173636969466163657360b01b60208083019182528351808501909452600384526220a9a360e91b9084015281519192916200006991600091620025fc565b5080516200007f906001906020840190620025fc565b5050506000620000946200023860201b60201c565b600a80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350620001286040518060400160405280602081526020017f68747470733a2f2f6170692e617363696966616365732e636f6d2f666163652f8152506200023c60201b60201c565b62000147603c62000141600a546001600160a01b031690565b620002b5565b5062000161601b62000141600a546001600160a01b031690565b506200017b602c62000141600a546001600160a01b031690565b5062000195604662000141600a546001600160a01b031690565b50620001af607462000141600a546001600160a01b031690565b50620001c9609e62000141600a546001600160a01b031690565b50620001e360dd62000141600a546001600160a01b031690565b50620001fd60de62000141600a546001600160a01b031690565b506200021760e962000141600a546001600160a01b031690565b506200023160ce62000141600a546001600160a01b031690565b50620027f4565b3390565b600a546001600160a01b031633146200029c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b8051620002b190600f906020840190620025fc565b5050565b6060620002ce600b6200039160201b620011521760201c565b82600c6000620002ea600b6200039a60201b6200115b1760201c565b81526020019081526020016000208190555062000313600b6200039a60201b6200115b1760201c565b600d600085815260200190815260200160002081905550600062000366600c60006200034b600b6200039a60201b6200115b1760201c565b8152602001908152602001600020546200039e60201b60201c565b90506200038a8362000384600b6200039a60201b6200115b1760201c565b62000437565b9392505050565b80546001019055565b5490565b6060600082604051602001620003b691815260200190565b60408051601f19818403018152919052805160209091012090506000620003dd826200058d565b90506000620003ec8362000db6565b90506000620003fb8462001dc1565b83518351602085810151818801516040519596506200041d9587930162002706565b604051602081830303815290604052945050505050919050565b6001600160a01b0382166200048f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640162000293565b6000818152600260205260409020546001600160a01b031615620004f65760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000293565b62000504600083836200229e565b6001600160a01b03821660009081526003602052604081208054600192906200052f9084906200274b565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b620005976200268b565b604080516104a0810182526000610480820181815261044083019081528351602081810186528382526104608501919091529083528351608080820186526001828701818152600560fb1b60608086018290529185528851808a018a52838152602960f81b818801528587015285880194909452875180840189526004818a01818152631c7077a560e31b8385018190529083528a51808c018c528281526329efbe8960e01b818a01819052848a01919091528a8c01939093528a518087018c526002818d0181815261078560f31b8388015282528c51808e018e5281815261149f60f11b818c0152828b0152858c01919091528b518088018d526003818e01818152621b352560eb1b8389015282528d51808f018f528181526214eddb60e91b818d0152828c0152888d01919091528c518089018e52808e01858152631c52b60560e31b8289015281528d51808f018f528581526329e295af60e01b818d0152818c015260a08d01528c518089018e52808e01858152631df7978560e31b8289015281528d51808f018f528581526329efbc8f60e01b818d0152818c015260c08d01528c518089018e52808e018581526328efbe8960e01b8289015281528d51808f018f52858152808c0196909652808b019590955260e08c01949094528b518088018d52808d018781528187018a905281528c51808e018e528481526314f1c1c760e11b818c0152818b01526101008c01528b518088018d52808d018481526328e3808d60e01b8288015281528c51808e018e528481526329e3808d60e01b818c0152818b01526101208c01528b518088018d52808d01848152631c7077c560e31b8288015281528c51808e018e52600781526614f7df44f7df4f60c91b818c0152818b01526101408c01528b518088018d52808d01848152631cb0f70560e31b8288015281528c51808e018e5284815263053cb0f760e31b818c0152818b01526101608c01528b518088018d52808d01878152818701999099529788528b51808d018d5283815263053c511160e31b818b0152888a01526101808b01979097528a518087018c52808c01838152631c15b4e560e31b8287015281528b51808d018d5283815263053c15b560e31b818b0152818a01526101a08b01528a518087018c52808c018381526328e381a360e01b8287015281528b51808d018d528381526329e381a360e01b818b0152818a01526101c08b01528a518087018c52808c01888152610de560f31b8287015281528b51808d018d5288815261296f60f01b818b0152818a01526101e08b01528a518087018c52808c01868152605b60f81b8287015281528b51808d018d52868152605d60f81b818b0152818a01526102008b01528a518087018c52808c01868152607b60f81b8287015281528b51808d018d52958652607d60f81b868a0152808901959095526102208a019490945289518086018b52808b01828152631c70138560e31b8286018190529082528b51808d018d52838152630a78e02760e21b818b0152828a01526102408b01919091528a518087018c52808c01838152631c70146560e31b8287015281528b51808d018d528381526329e380a360e01b818b0152818a01526102608b01528a518087018c52808c01838152631c52d22560e31b8287015281528b51808d018d528381526329e2969160e01b818b0152818a01526102808b01528a518087018c52808c01838152818601969096529485528a51808c018c52828152630a78a52360e21b818a01819052868a01919091526102a08b01959095528a518087018c52808c01838152631c52920560e31b8287015281528b51808d018d52838152808a0196909652808901959095526102c08a019490945289518086018b52808b01878152611f9f60f21b8286015281528a51808c018c52878152613e3f60f11b818a0152818901526102e08a015289518086018b52808b01828152631c51504560e31b8286015281528a51808c018c528281526329e28a8360e01b818a0152818901526103008a015289518086018b52808b01828152631df791e560e31b8286015281528a51808c018c52828152630a7bef2f60e21b818a0152818901526103208a015289518086018b52808b01828152631c70730560e31b8286015281528a51808c018c5282815263e383982960e01b818a0152818901526103408a015289518086018b52808b01828152818501959095529384528951808b018b5281815263e3809c2960e01b818901528488015261036089019390935288518085018a52808a01828152620e380960ec1b8285015281528951808b018b5291825262e3809160e81b8288015280870191909152610380880152875180840189528089018381526328e0a9ad60e01b8284015281528851808a018a528381526329e0a9ad60e01b81880152818701526103a088015287518084018952808901838152631c52b34560e31b8284015281528851808a018a529283526329e2959d60e01b83870152808601929092526103c08701919091528651808301885260068189018181526538e0ef782f2f60d21b8385015282528851808a018a5290815265e0bcbdefbe8960d01b81870152818601526103e087015286518083018852808801848152610f1f60f21b82840152815287518089018952848152613e1f60f11b818701528186015261040087015286519182018752818701838152611f1f60f21b9183018290528252865180880190975291865285830191909152908101939093526104208201929092529062000d86602285620027bd565b905081816022811062000da957634e487b7160e01b600052603260045260246000fd5b6020020151949350505050565b62000dc06200268b565b6000604051806106600160405280604051806040016040528060405180602001604052806000815250815260200160405180602001604052806000815250815250815260200160405180604001604052806040518060400160405280600281526020016130ad60f21b8152508152602001604051806040016040528060018152602001600360fd1b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e2979560e81b815250815260200160405180604001604052806003815260200162e2979560e81b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e289a760e81b8152508152602001604051806040016040528060038152602001627144d360e91b815250815250815260200160405180604001604052806040518060400160405280600381526020016271464960e91b81525081526020016040518060400160405280600381526020016271464960e91b8152508152508152602001604051806040016040528060405180604001604052806003815260200162efbfa360e81b815250815260200160405180604001604052806003815260200162efbfa360e81b815250815250815260200160405180604001604052806040518060400160405280600381526020016271405160e91b81525081526020016040518060400160405280600381526020016271405160e91b81525081525081526020016040518060400160405280604051806040016040528060028152602001610c2b60f41b8152508152602001604051806040016040528060028152602001610c2b60f41b815250815250815260200160405180604001604052806040518060400160405280600381526020016277de5f60e91b81525081526020016040518060400160405280600381526020016277de5f60e91b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e29ca760e81b815250815260200160405180604001604052806003815260200162e29ca760e81b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e29caf60e81b815250815260200160405180604001604052806003815260200162e29caf60e81b8152508152508152602001604051806040016040528060405180604001604052806005815260200164e280a2cc8160d81b81525081526020016040518060400160405280600581526020016401c501459960df1b81525081525081526020016040518060400160405280604051806040016040528060018152602001601560f91b8152508152602001604051806040016040528060018152602001601560f91b81525081525081526020016040518060400160405280604051806040016040528060018152602001601560fa1b8152508152602001604051806040016040528060018152602001601560fa1b8152508152508152602001604051806040016040528060405180604001604052806002815260200161cb8360f01b81525081526020016040518060400160405280600281526020016165c160f11b8152508152508152602001604051806040016040528060405180604001604052806006815260200165ea92a6e0bab560d01b815250815260200160405180604001604052806006815260200165ea92a6e0bab560d01b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e29d9b60e81b815250815260200160405180604001604052806003815260200162e29d9b60e81b815250815250815260200160405180604001604052806040518060400160405280600281526020016130ab60f21b81525081526020016040518060400160405280600281526020016130ab60f21b8152508152508152602001604051806040016040528060405180604001604052806003815260200162efbda560e81b815250815260200160405180604001604052806003815260200162efbda560e81b8152508152508152602001604051806040016040528060405180604001604052806003815260200162386d6560ea1b815250815260200160405180604001604052806003815260200162386d6560ea1b815250815250815260200160405180604001604052806040518060400160405280600381526020016277dfd160e91b81525081526020016040518060400160405280600381526020016277dfd160e91b815250815250815260200160405180604001604052806040518060400160405280600381526020016201c50360ef1b81525081526020016040518060400160405280600381526020016201c50360ef1b8152508152508152602001604051806040016040528060405180604001604052806002815260200161cb9960f01b815250815260200160405180604001604052806002815260200161cb9960f01b815250815250815260200160405180604001604052806040518060400160405280600281526020016133af60f21b81525081526020016040518060400160405280600281526020016133af60f21b81525081525081526020016040518060400160405280604051806040016040528060018152602001602d60f81b8152508152602001604051806040016040528060018152602001602d60f81b8152508152508152602001604051806040016040528060405180604001604052806005815260200164615a71405160d91b8152508152602001604051806040016040528060048152602001630714051360e51b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e299a160e81b815250815260200160405180604001604052806003815260200162e299a160e81b8152508152508152602001604051806040016040528060405180604001604052806002815260200161cf8360f01b815250815260200160405180604001604052806002815260200161cf8360f01b815250815250815260200160405180604001604052806040518060400160405280600381526020016238a76960ea1b81525081526020016040518060400160405280600381526020016238a76960ea1b81525081525081526020016040518060400160405280604051806040016040528060038152602001621d711160eb1b8152508152602001604051806040016040528060038152602001621d711160eb1b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e297a360e81b815250815260200160405180604001604052806003815260200162714bd160e91b81525081525081526020016040518060400160405280604051806040016040528060018152602001600360fd1b81525081526020016040518060400160405280600281526020016130ad60f21b815250815250815260200160405180604001604052806040518060400160405280600381526020016238a5af60ea1b81525081526020016040518060400160405280600381526020016238a5af60ea1b8152508152508152602001604051806040016040528060405180604001604052806002815260200161675360f11b815250815260200160405180604001604052806002815260200161675360f11b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e0b99160e81b815250815260200160405180604001604052806003815260200162e0b99160e81b8152508152508152602001604051806040016040528060405180604001604052806002815260200161195360f31b815250815260200160405180604001604052806002815260200161195360f31b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e0b2a560e81b815250815260200160405180604001604052806003815260200162e0b2a560e81b815250815250815260200160405180604001604052806040518060400160405280600381526020016207058560ed1b81525081526020016040518060400160405280600381526020016207058560ed1b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e0b2a560e81b815250815260200160405180604001604052806003815260200162e0b2a560e81b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e295af60e81b8152508152602001604051806040016040528060038152602001620e295b60ec1b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e295a560e81b815250815260200160405180604001604052806003815260200162e295a560e81b8152508152508152602001604051806040016040528060405180604001604052806002815260200161c39760f01b815250815260200160405180604001604052806002815260200161c39760f01b8152508152508152602001604051806040016040528060405180604001604052806003815260200162efbc8b60e81b815250815260200160405180604001604052806003815260200162efbc8b60e81b81525081525081526020016040518060400160405280604051806040016040528060018152602001601f60f91b8152508152602001604051806040016040528060018152602001600f60fa1b8152508152508152602001604051806040016040528060405180604001604052806002815260200161cb8760f01b815250815260200160405180604001604052806002815260200161cb8760f01b8152508152508152602001604051806040016040528060405180604001604052806003815260200162077de560ed1b815250815260200160405180604001604052806003815260200162077de560ed1b815250815250815260200160405180604001604052806040518060400160405280600381526020016201c32760ef1b81525081526020016040518060400160405280600381526020016201c32760ef1b815250815250815260200160405180604001604052806040518060400160405280600581526020016401c501459960df1b815250815260200160405180604001604052806005815260200164e280a2cc8160d81b815250815250815260200160405180604001604052806040518060400160405280600381526020016238a5e560ea1b81525081526020016040518060400160405280600381526020016238a5e560ea1b815250815250815260200160405180604001604052806040518060400160405280600381526020016207059560ed1b81525081526020016040518060400160405280600381526020016207059560ed1b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e2978f60e81b815250815260200160405180604001604052806003815260200162e2978f60e81b8152508152508152509050600060338462001d9e9190620027bd565b905081816033811062000da957634e487b7160e01b600052603260045260246000fd5b604080516105a081018252600061058082018181528252825180840184526001808252601760f91b6020838101919091528085019290925284518086018652818152605f60f81b818401528486015284518086018652818152602d60f81b8184015260608581019190915285518087018752600380825262e296bd60e81b8286015260808701919091528651808801885281815262e3878160e81b8186015260a08701528651808801885281815262e1b4a560e81b81860181905260c088019190915287518089018952600280825261cf8960f01b8288015260e08901919091528851808a018a5283815262e280bf60e81b818801526101008901528851808a018a528381526277dc5b60e91b818801526101208901528851808a018a5283815262e297a160e81b818801526101408901528851808a018a5283815262725d5d60e91b818801526101608901528851808a018a528381526201c51160ef1b818801526101808901528851808a018a526006815265e280bfe280bf60d01b818801526101a08901528851808a018a528381526271c1d760e91b818801526101c08901528851808a018a5283815262e296bf60e81b818801526101e08901528851808a018a528381526270cbd160e91b818801526102008901528851808a018a5283815262ea92b360e81b818801526102208901528851808a018a52818152616b4560f11b818801526102408901528851808a018a5281815261ceb560f01b818801526102608901528851808a018a5281815261d0b760f01b818801526102808901528851808a018a5281815261342560f21b818801526102a08901528851808a018a52858152600360fc1b818801526102c08901528851808a018a52838152623bee6360ea1b818801526102e08901528851808a018a52838152621c707360eb1b818801526103008901528851808a018a528381526271464960e91b818801526103208901528851808a018a528381526273cdc560e91b818801526103408901528851808a018a5283815262e79abf60e81b818801526103608901528851808a018a5283815262e296b360e81b818801526103808901528851808a018a5283815262efb98f60e81b818801526103a08901528851808a018a5283815262efbe9b60e81b818801526103c08901528851808a018a52858152602f60f91b818801526103e08901528851808a018a52948552607760f81b858701526104008801949094528751808901895282815262e296a160e81b818701526104208801528751808901895282815262efb8bf60e81b8187015261044088015287518089018952828152623bef6960ea1b81870152610460880152875180890189528281526277decf60e91b81870152610480880152875180890189528281526271c04160e91b818701526104a08801528751808901895284815261654b60f11b818701526104c088015287518089018952828152808601919091526104e087015286518088018852600581526428efbdb42960d81b818601526105008701528651808801885283815261c39760f01b81860152610520870152865180880188529081526270c35d60e91b8185015261054086015285518087019096529085526119d360f31b918501919091526105608301939093526200227b602c85620027bd565b90508181602c811062000da957634e487b7160e01b600052603260045260246000fd5b620022b6838383620022bb60201b6200115f1760201c565b505050565b620022d3838383620022b660201b6200061d1760201c565b6001600160a01b03831662002331576200232b81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b62002357565b816001600160a01b0316836001600160a01b031614620023575762002357838262002397565b6001600160a01b0382166200237157620022b68162002444565b826001600160a01b0316826001600160a01b031614620022b657620022b6828262002522565b60006001620023b1846200257360201b62000a961760201c565b620023bd919062002766565b60008381526007602052604090205490915080821462002411576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090620024589060019062002766565b600083815260096020526040812054600880549394509092849081106200248f57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110620024bf57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806200250657634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006200253a836200257360201b62000a961760201c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60006001600160a01b038216620025e05760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840162000293565b506001600160a01b031660009081526003602052604090205490565b8280546200260a9062002780565b90600052602060002090601f0160209004810192826200262e576000855562002679565b82601f106200264957805160ff191683800117855562002679565b8280016001018555821562002679579182015b82811115620026795782518255916020019190600101906200265c565b5062002687929150620026b3565b5090565b60405180604001604052806002905b60608152602001906001900390816200269a5790505090565b5b80821115620026875760008155600101620026b4565b60008151815b81811015620026ec5760208185018101518683015201620026d0565b81811115620026fb5782828601525b509290920192915050565b60006200274062002739620027326200272b62002724868c620026ca565b8a620026ca565b88620026ca565b86620026ca565b84620026ca565b979650505050505050565b60008219821115620027615762002761620027de565b500190565b6000828210156200277b576200277b620027de565b500390565b600181811c908216806200279557607f821691505b60208210811415620027b757634e487b7160e01b600052602260045260246000fd5b50919050565b600082620027d957634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b61402880620028046000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636275e9f2116100f9578063a22cb46511610097578063c87b56dd11610071578063c87b56dd1461035a578063e985e9c51461036d578063f2fde38b146103a9578063f4297d4b146103bc57600080fd5b8063a22cb4651461032c578063b66a0e5d1461033f578063b88d4fde1461034757600080fd5b806370a08231116100d357806370a08231146102f8578063715018a61461030b5780638da5cb5b1461031357806395d89b411461032457600080fd5b80636275e9f2146102ca5780636352211e146102dd5780636c0360eb146102f057600080fd5b806323b872dd1161016657806342842e0e1161014057806342842e0e146102895780634f6ccce71461029c57806355367ba9146102af57806355f804b3146102b757600080fd5b806323b872dd1461025a5780632f745c591461026d57806332cb6b0c1461028057600080fd5b8063095ea7b311610197578063095ea7b31461022657806318160ddd1461023b5780631c8b232d1461024d57600080fd5b806301ffc9a7146101be57806306fdde03146101e6578063081812fc146101fb575b600080fd5b6101d16101cc366004613d3c565b6103cf565b60405190151581526020015b60405180910390f35b6101ee6103e0565b6040516101dd9190613ed4565b61020e610209366004613dba565b610472565b6040516001600160a01b0390911681526020016101dd565b610239610234366004613d13565b61050c565b005b6008545b6040519081526020016101dd565b600e546101d19060ff1681565b610239610268366004613c25565b610622565b61023f61027b366004613d13565b6106a9565b61023f61138881565b610239610297366004613c25565b610751565b61023f6102aa366004613dba565b61076c565b61023961081e565b6102396102c5366004613d74565b610884565b6101ee6102d8366004613dba565b6108f5565b61020e6102eb366004613dba565b61097d565b6101ee610a08565b61023f610306366004613bd9565b610a96565b610239610b30565b600a546001600160a01b031661020e565b6101ee610bd4565b61023961033a366004613cd9565b610be3565b610239610ca8565b610239610355366004613c60565b610d11565b6101ee610368366004613dba565b610d9f565b6101d161037b366004613bf3565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102396103b7366004613bd9565b610e88565b6101ee6103ca366004613dba565b610fba565b60006103da82611217565b92915050565b6060600080546103ef90613f56565b80601f016020809104026020016040519081016040528092919081815260200182805461041b90613f56565b80156104685780601f1061043d57610100808354040283529160200191610468565b820191906000526020600020905b81548152906001019060200180831161044b57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104f05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105178261097d565b9050806001600160a01b0316836001600160a01b031614156105855760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104e7565b336001600160a01b03821614806105a157506105a1813361037b565b6106135760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016104e7565b61061d838361123c565b505050565b61062c33826112aa565b61069e5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016104e7565b61061d83838361139d565b60006106b483610a96565b82106107285760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016104e7565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61061d83838360405180602001604052806000815250610d11565b600061077760085490565b82106107eb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016104e7565b6008828154811061080c57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600a546001600160a01b031633146108785760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e7565b600e805460ff19169055565b600a546001600160a01b031633146108de5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e7565b80516108f190600f906020840190613a87565b5050565b6000818152600260205260409020546060906001600160a01b031661095c5760405162461bcd60e51b815260206004820152601a60248201527f4552433732313a20546f6b656e206973206e6f7420657869737400000000000060448201526064016104e7565b6000828152600c6020526040812054906109758261155c565b949350505050565b6000818152600260205260408120546001600160a01b0316806103da5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016104e7565b600f8054610a1590613f56565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4190613f56565b8015610a8e5780601f10610a6357610100808354040283529160200191610a8e565b820191906000526020600020905b815481529060010190602001808311610a7157829003601f168201915b505050505081565b60006001600160a01b038216610b145760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016104e7565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314610b8a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e7565b600a546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600a80546001600160a01b0319169055565b6060600180546103ef90613f56565b6001600160a01b038216331415610c3c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104e7565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600a546001600160a01b03163314610d025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e7565b600e805460ff19166001179055565b610d1b33836112aa565b610d8d5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016104e7565b610d99848484846115ed565b50505050565b6000818152600260205260409020546060906001600160a01b0316610e2c5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016104e7565b6000610e36611676565b90506000815111610e565760405180602001604052806000815250610e81565b80610e6084611685565b604051602001610e71929190613dfe565b6040516020818303038152906040525b9392505050565b600a546001600160a01b03163314610ee25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104e7565b6001600160a01b038116610f5e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104e7565b600a546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600e5460609060ff1615156001146110145760405162461bcd60e51b815260206004820152601360248201527f53616c65206861736e277420737461727465640000000000000000000000000060448201526064016104e7565b611388611020600b5490565b106110935760405162461bcd60e51b815260206004820152603560248201527f53616c652068617320656e6465642c20796f752063616e207374696c6c20627560448201527f79206f6e207365636f6e64617279206d61726b6574000000000000000000000060648201526084016104e7565b60008242336110a1600b5490565b6040805160208101959095528401929092526bffffffffffffffffffffffff19606091821b1690830152607482015260940160408051601f1981840301815291815281516020928301206000818152600d909352912054909150156111485760405162461bcd60e51b815260206004820152601960248201527f4552433732313a207365656420616c726561647920757365640000000000000060448201526064016104e7565b610e8181336117b7565b80546001019055565b5490565b6001600160a01b0383166111ba576111b581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6111dd565b816001600160a01b0316836001600160a01b0316146111dd576111dd8382611832565b6001600160a01b0382166111f45761061d816118cf565b826001600160a01b0316826001600160a01b03161461061d5761061d82826119a8565b60006001600160e01b0319821663780e9d6360e01b14806103da57506103da826119ec565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906112718261097d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166113235760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104e7565b600061132e8361097d565b9050806001600160a01b0316846001600160a01b031614806113695750836001600160a01b031661135e84610472565b6001600160a01b0316145b8061097557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16610975565b826001600160a01b03166113b08261097d565b6001600160a01b03161461142c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016104e7565b6001600160a01b03821661148e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104e7565b611499838383611a3c565b6114a460008261123c565b6001600160a01b03831660009081526003602052604081208054600192906114cd908490613f13565b90915550506001600160a01b03821660009081526003602052604081208054600192906114fb908490613ee7565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b606060008260405160200161157391815260200190565b6040516020818303038152906040528051906020012060001c9050600061159982611a47565b905060006115a6836122af565b905060006115b3846132cd565b83518351602085810151818801516040519596506115d395879301613e2d565b604051602081830303815290604052945050505050919050565b6115f884848461139d565b611604848484846137d6565b610d995760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104e7565b6060600f80546103ef90613f56565b6060816116a95750506040805180820190915260018152600360fc1b602082015290565b8160005b81156116d357806116bd81613f91565b91506116cc9050600a83613eff565b91506116ad565b60008167ffffffffffffffff8111156116fc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611726576020820181803683370190505b5090505b84156109755761173b600183613f13565b9150611748600a86613fac565b611753906030613ee7565b60f81b81838151811061177657634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506117b0600a86613eff565b945061172a565b60606117c7600b80546001019055565b82600c60006117d5600b5490565b8152602081019190915260400160002055600b546000848152600d602052604081209190915561181e600c8261180a600b5490565b81526020019081526020016000205461155c565b9050610e818361182d600b5490565b613939565b6000600161183f84610a96565b6118499190613f13565b60008381526007602052604090205490915080821461189c576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906118e190600190613f13565b6000838152600960205260408120546008805493945090928490811061191757634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061194657634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061198c57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006119b383610a96565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60006001600160e01b031982166380ac58cd60e01b1480611a1d57506001600160e01b03198216635b5e139f60e01b145b806103da57506301ffc9a760e01b6001600160e01b03198316146103da565b61061d83838361115f565b611a4f613b0b565b604080516104a0810182526000610480820181815261044083019081528351602081810186528382526104608501919091529083528351608080820186526001828701818152600560fb1b60608086018290529185528851808a018a52838152602960f81b818801528587015285880194909452875180840189526004818a01818152631c7077a560e31b8385018190529083528a51808c018c528281526329efbe8960e01b818a01819052848a01919091528a8c01939093528a518087018c526002818d0181815261078560f31b8388015282528c51808e018e5281815261149f60f11b818c0152828b0152858c01919091528b518088018d526003818e01818152621b352560eb1b8389015282528d51808f018f528181526214eddb60e91b818d0152828c0152888d01919091528c518089018e52808e01858152631c52b60560e31b8289015281528d51808f018f528581526329e295af60e01b818d0152818c015260a08d01528c518089018e52808e01858152631df7978560e31b8289015281528d51808f018f528581526329efbc8f60e01b818d0152818c015260c08d01528c518089018e52808e018581526328efbe8960e01b8289015281528d51808f018f52858152808c0196909652808b019590955260e08c01949094528b518088018d52808d018781528187018a905281528c51808e018e528481526314f1c1c760e11b818c0152818b01526101008c01528b518088018d52808d018481526328e3808d60e01b8288015281528c51808e018e528481526329e3808d60e01b818c0152818b01526101208c01528b518088018d52808d01848152631c7077c560e31b8288015281528c51808e018e52600781527f29efbe89efbe9e00000000000000000000000000000000000000000000000000818c0152818b01526101408c01528b518088018d52808d01848152631cb0f70560e31b8288015281528c51808e018e5284815263053cb0f760e31b818c0152818b01526101608c01528b518088018d52808d01878152818701999099529788528b51808d018d5283815263053c511160e31b818b0152888a01526101808b01979097528a518087018c52808c01838152631c15b4e560e31b8287015281528b51808d018d5283815263053c15b560e31b818b0152818a01526101a08b01528a518087018c52808c018381526328e381a360e01b8287015281528b51808d018d528381526329e381a360e01b818b0152818a01526101c08b01528a518087018c52808c01888152610de560f31b8287015281528b51808d018d5288815261296f60f01b818b0152818a01526101e08b01528a518087018c52808c01868152605b60f81b8287015281528b51808d018d52868152605d60f81b818b0152818a01526102008b01528a518087018c52808c01868152607b60f81b8287015281528b51808d018d52958652607d60f81b868a0152808901959095526102208a019490945289518086018b52808b01828152631c70138560e31b8286018190529082528b51808d018d52838152630a78e02760e21b818b0152828a01526102408b01919091528a518087018c52808c01838152631c70146560e31b8287015281528b51808d018d528381526329e380a360e01b818b0152818a01526102608b01528a518087018c52808c01838152631c52d22560e31b8287015281528b51808d018d528381526329e2969160e01b818b0152818a01526102808b01528a518087018c52808c01838152818601969096529485528a51808c018c52828152630a78a52360e21b818a01819052868a01919091526102a08b01959095528a518087018c52808c01838152631c52920560e31b8287015281528b51808d018d52838152808a0196909652808901959095526102c08a019490945289518086018b52808b01878152611f9f60f21b8286015281528a51808c018c52878152613e3f60f11b818a0152818901526102e08a015289518086018b52808b01828152631c51504560e31b8286015281528a51808c018c528281526329e28a8360e01b818a0152818901526103008a015289518086018b52808b01828152631df791e560e31b8286015281528a51808c018c52828152630a7bef2f60e21b818a0152818901526103208a015289518086018b52808b01828152631c70730560e31b8286015281528a51808c018c5282815263e383982960e01b818a0152818901526103408a015289518086018b52808b01828152818501959095529384528951808b018b5281815263e3809c2960e01b818901528488015261036089019390935288518085018a52808a01828152620e380960ec1b8285015281528951808b018b5291825262e3809160e81b8288015280870191909152610380880152875180840189528089018381526328e0a9ad60e01b8284015281528851808a018a528381526329e0a9ad60e01b81880152818701526103a088015287518084018952808901838152631c52b34560e31b8284015281528851808a018a529283526329e2959d60e01b83870152808601929092526103c08701919091528651808301885260068189018181527fe383bde0bcbc00000000000000000000000000000000000000000000000000008385015282528851808a018a529081527fe0bcbdefbe89000000000000000000000000000000000000000000000000000081870152818601526103e087015286518083018852808801848152610f1f60f21b82840152815287518089018952848152613e1f60f11b818701528186015261040087015286519182018752818701838152611f1f60f21b91830182905282528651808801909752918652858301919091529081019390935261042082019290925290612280602285613fac565b90508181602281106122a257634e487b7160e01b600052603260045260246000fd5b6020020151949350505050565b6122b7613b0b565b6000604051806106600160405280604051806040016040528060405180602001604052806000815250815260200160405180602001604052806000815250815250815260200160405180604001604052806040518060400160405280600281526020016130ad60f21b8152508152602001604051806040016040528060018152602001600360fd1b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e2979560e81b815250815260200160405180604001604052806003815260200162e2979560e81b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e289a760e81b8152508152602001604051806040016040528060038152602001627144d360e91b815250815250815260200160405180604001604052806040518060400160405280600381526020016271464960e91b81525081526020016040518060400160405280600381526020016271464960e91b8152508152508152602001604051806040016040528060405180604001604052806003815260200162efbfa360e81b815250815260200160405180604001604052806003815260200162efbfa360e81b815250815250815260200160405180604001604052806040518060400160405280600381526020016271405160e91b81525081526020016040518060400160405280600381526020016271405160e91b81525081525081526020016040518060400160405280604051806040016040528060028152602001610c2b60f41b8152508152602001604051806040016040528060028152602001610c2b60f41b815250815250815260200160405180604001604052806040518060400160405280600381526020016277de5f60e91b81525081526020016040518060400160405280600381526020016277de5f60e91b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e29ca760e81b815250815260200160405180604001604052806003815260200162e29ca760e81b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e29caf60e81b815250815260200160405180604001604052806003815260200162e29caf60e81b8152508152508152602001604051806040016040528060405180604001604052806005815260200164e280a2cc8160d81b81525081526020016040518060400160405280600581526020016401c501459960df1b81525081525081526020016040518060400160405280604051806040016040528060018152602001601560f91b8152508152602001604051806040016040528060018152602001601560f91b81525081525081526020016040518060400160405280604051806040016040528060018152602001601560fa1b8152508152602001604051806040016040528060018152602001601560fa1b8152508152508152602001604051806040016040528060405180604001604052806002815260200161cb8360f01b81525081526020016040518060400160405280600281526020016165c160f11b8152508152508152602001604051806040016040528060405180604001604052806006815260200165ea92a6e0bab560d01b815250815260200160405180604001604052806006815260200165ea92a6e0bab560d01b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e29d9b60e81b815250815260200160405180604001604052806003815260200162e29d9b60e81b815250815250815260200160405180604001604052806040518060400160405280600281526020016130ab60f21b81525081526020016040518060400160405280600281526020016130ab60f21b8152508152508152602001604051806040016040528060405180604001604052806003815260200162efbda560e81b815250815260200160405180604001604052806003815260200162efbda560e81b8152508152508152602001604051806040016040528060405180604001604052806003815260200162386d6560ea1b815250815260200160405180604001604052806003815260200162386d6560ea1b815250815250815260200160405180604001604052806040518060400160405280600381526020016277dfd160e91b81525081526020016040518060400160405280600381526020016277dfd160e91b815250815250815260200160405180604001604052806040518060400160405280600381526020016201c50360ef1b81525081526020016040518060400160405280600381526020016201c50360ef1b8152508152508152602001604051806040016040528060405180604001604052806002815260200161cb9960f01b815250815260200160405180604001604052806002815260200161cb9960f01b815250815250815260200160405180604001604052806040518060400160405280600281526020016133af60f21b81525081526020016040518060400160405280600281526020016133af60f21b81525081525081526020016040518060400160405280604051806040016040528060018152602001602d60f81b8152508152602001604051806040016040528060018152602001602d60f81b815250815250815260200160405180604001604052806040518060400160405280600581526020017fc2b4e280a20000000000000000000000000000000000000000000000000000008152508152602001604051806040016040528060048152602001630714051360e51b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e299a160e81b815250815260200160405180604001604052806003815260200162e299a160e81b8152508152508152602001604051806040016040528060405180604001604052806002815260200161cf8360f01b815250815260200160405180604001604052806002815260200161cf8360f01b815250815250815260200160405180604001604052806040518060400160405280600381526020016238a76960ea1b81525081526020016040518060400160405280600381526020016238a76960ea1b81525081525081526020016040518060400160405280604051806040016040528060038152602001621d711160eb1b8152508152602001604051806040016040528060038152602001621d711160eb1b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e297a360e81b815250815260200160405180604001604052806003815260200162714bd160e91b81525081525081526020016040518060400160405280604051806040016040528060018152602001600360fd1b81525081526020016040518060400160405280600281526020016130ad60f21b815250815250815260200160405180604001604052806040518060400160405280600381526020016238a5af60ea1b81525081526020016040518060400160405280600381526020016238a5af60ea1b8152508152508152602001604051806040016040528060405180604001604052806002815260200161675360f11b815250815260200160405180604001604052806002815260200161675360f11b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e0b99160e81b815250815260200160405180604001604052806003815260200162e0b99160e81b8152508152508152602001604051806040016040528060405180604001604052806002815260200161195360f31b815250815260200160405180604001604052806002815260200161195360f31b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e0b2a560e81b815250815260200160405180604001604052806003815260200162e0b2a560e81b815250815250815260200160405180604001604052806040518060400160405280600381526020016207058560ed1b81525081526020016040518060400160405280600381526020016207058560ed1b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e0b2a560e81b815250815260200160405180604001604052806003815260200162e0b2a560e81b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e295af60e81b8152508152602001604051806040016040528060038152602001620e295b60ec1b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e295a560e81b815250815260200160405180604001604052806003815260200162e295a560e81b8152508152508152602001604051806040016040528060405180604001604052806002815260200161c39760f01b815250815260200160405180604001604052806002815260200161c39760f01b8152508152508152602001604051806040016040528060405180604001604052806003815260200162efbc8b60e81b815250815260200160405180604001604052806003815260200162efbc8b60e81b81525081525081526020016040518060400160405280604051806040016040528060018152602001601f60f91b8152508152602001604051806040016040528060018152602001600f60fa1b8152508152508152602001604051806040016040528060405180604001604052806002815260200161cb8760f01b815250815260200160405180604001604052806002815260200161cb8760f01b8152508152508152602001604051806040016040528060405180604001604052806003815260200162077de560ed1b815250815260200160405180604001604052806003815260200162077de560ed1b815250815250815260200160405180604001604052806040518060400160405280600381526020016201c32760ef1b81525081526020016040518060400160405280600381526020016201c32760ef1b815250815250815260200160405180604001604052806040518060400160405280600581526020016401c501459960df1b815250815260200160405180604001604052806005815260200164e280a2cc8160d81b815250815250815260200160405180604001604052806040518060400160405280600381526020016238a5e560ea1b81525081526020016040518060400160405280600381526020016238a5e560ea1b815250815250815260200160405180604001604052806040518060400160405280600381526020016207059560ed1b81525081526020016040518060400160405280600381526020016207059560ed1b8152508152508152602001604051806040016040528060405180604001604052806003815260200162e2978f60e81b815250815260200160405180604001604052806003815260200162e2978f60e81b815250815250815250905060006033846132ab9190613fac565b90508181603381106122a257634e487b7160e01b600052603260045260246000fd5b604080516105a081018252600061058082018181528252825180840184526001808252601760f91b6020838101919091528085019290925284518086018652818152605f60f81b818401528486015284518086018652818152602d60f81b8184015260608581019190915285518087018752600380825262e296bd60e81b8286015260808701919091528651808801885281815262e3878160e81b8186015260a08701528651808801885281815262e1b4a560e81b81860181905260c088019190915287518089018952600280825261cf8960f01b8288015260e08901919091528851808a018a5283815262e280bf60e81b818801526101008901528851808a018a528381526277dc5b60e91b818801526101208901528851808a018a5283815262e297a160e81b818801526101408901528851808a018a5283815262725d5d60e91b818801526101608901528851808a018a528381526201c51160ef1b818801526101808901528851808a018a52600681527fe280bfe280bf0000000000000000000000000000000000000000000000000000818801526101a08901528851808a018a528381526271c1d760e91b818801526101c08901528851808a018a5283815262e296bf60e81b818801526101e08901528851808a018a528381526270cbd160e91b818801526102008901528851808a018a5283815262ea92b360e81b818801526102208901528851808a018a52818152616b4560f11b818801526102408901528851808a018a5281815261ceb560f01b818801526102608901528851808a018a5281815261d0b760f01b818801526102808901528851808a018a5281815261342560f21b818801526102a08901528851808a018a52858152600360fc1b818801526102c08901528851808a018a52838152623bee6360ea1b818801526102e08901528851808a018a52838152621c707360eb1b818801526103008901528851808a018a528381526271464960e91b818801526103208901528851808a018a528381526273cdc560e91b818801526103408901528851808a018a5283815262e79abf60e81b818801526103608901528851808a018a5283815262e296b360e81b818801526103808901528851808a018a5283815262efb98f60e81b818801526103a08901528851808a018a5283815262efbe9b60e81b818801526103c08901528851808a018a52858152602f60f91b818801526103e08901528851808a018a52948552607760f81b858701526104008801949094528751808901895282815262e296a160e81b818701526104208801528751808901895282815262efb8bf60e81b8187015261044088015287518089018952828152623bef6960ea1b81870152610460880152875180890189528281526277decf60e91b81870152610480880152875180890189528281526271c04160e91b818701526104a08801528751808901895284815261654b60f11b818701526104c088015287518089018952828152808601919091526104e087015286518088018852600581527f28efbdb429000000000000000000000000000000000000000000000000000000818601526105008701528651808801885283815261c39760f01b81860152610520870152865180880188529081526270c35d60e91b8185015261054086015285518087019096529085526119d360f31b918501919091526105608301939093526137b4602c85613fac565b90508181602c81106122a257634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0384163b1561392e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061381a903390899088908890600401613e98565b602060405180830381600087803b15801561383457600080fd5b505af1925050508015613864575060408051601f3d908101601f1916820190925261386191810190613d58565b60015b613914573d808015613892576040519150601f19603f3d011682016040523d82523d6000602084013e613897565b606091505b50805161390c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104e7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610975565b506001949350505050565b6001600160a01b03821661398f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104e7565b6000818152600260205260409020546001600160a01b0316156139f45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104e7565b613a0060008383611a3c565b6001600160a01b0382166000908152600360205260408120805460019290613a29908490613ee7565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054613a9390613f56565b90600052602060002090601f016020900481019282613ab55760008555613afb565b82601f10613ace57805160ff1916838001178555613afb565b82800160010185558215613afb579182015b82811115613afb578251825591602001919060010190613ae0565b50613b07929150613b32565b5090565b60405180604001604052806002905b6060815260200190600190039081613b1a5790505090565b5b80821115613b075760008155600101613b33565b600067ffffffffffffffff80841115613b6257613b62613fec565b604051601f8501601f19908116603f01168101908282118183101715613b8a57613b8a613fec565b81604052809350858152868686011115613ba357600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114613bd457600080fd5b919050565b600060208284031215613bea578081fd5b610e8182613bbd565b60008060408385031215613c05578081fd5b613c0e83613bbd565b9150613c1c60208401613bbd565b90509250929050565b600080600060608486031215613c39578081fd5b613c4284613bbd565b9250613c5060208501613bbd565b9150604084013590509250925092565b60008060008060808587031215613c75578081fd5b613c7e85613bbd565b9350613c8c60208601613bbd565b925060408501359150606085013567ffffffffffffffff811115613cae578182fd5b8501601f81018713613cbe578182fd5b613ccd87823560208401613b47565b91505092959194509250565b60008060408385031215613ceb578182fd5b613cf483613bbd565b915060208301358015158114613d08578182fd5b809150509250929050565b60008060408385031215613d25578182fd5b613d2e83613bbd565b946020939093013593505050565b600060208284031215613d4d578081fd5b8135610e8181614002565b600060208284031215613d69578081fd5b8151610e8181614002565b600060208284031215613d85578081fd5b813567ffffffffffffffff811115613d9b578182fd5b8201601f81018413613dab578182fd5b61097584823560208401613b47565b600060208284031215613dcb578081fd5b5035919050565b60008151808452613dea816020860160208601613f2a565b601f01601f19169290920160200192915050565b60008351613e10818460208801613f2a565b835190830190613e24818360208801613f2a565b01949350505050565b60008651613e3f818460208b01613f2a565b865190830190613e53818360208b01613f2a565b8651910190613e66818360208a01613f2a565b8551910190613e79818360208901613f2a565b8451910190613e8c818360208801613f2a565b01979650505050505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152613eca6080830184613dd2565b9695505050505050565b602081526000610e816020830184613dd2565b60008219821115613efa57613efa613fc0565b500190565b600082613f0e57613f0e613fd6565b500490565b600082821015613f2557613f25613fc0565b500390565b60005b83811015613f45578181015183820152602001613f2d565b83811115610d995750506000910152565b600181811c90821680613f6a57607f821691505b60208210811415613f8b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613fa557613fa5613fc0565b5060010190565b600082613fbb57613fbb613fd6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461401857600080fd5b5056fea164736f6c6343000804000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 969,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 971,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 975,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 979,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 983,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 989,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1910,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1914,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1917,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1921,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2931,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)2616_storage"
      },
      {
        "astId": 2935,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "idToSeed",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2939,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "seedToId",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2954,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "hasSaleStarted",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2956,
        "contract": "contracts/AsciiFaces.sol:AsciiFaces",
        "label": "baseURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2616_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2615,
            "contract": "contracts/AsciiFaces.sol:AsciiFaces",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}